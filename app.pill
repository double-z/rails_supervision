require 'fileutils'

MACOSX = (RUBY_PLATFORM.downcase =~ /darwin/) ? true : false
RAILS_ROOT = ENV.key?('RAILS_ROOT') ? ENV['RAILS_ROOT'] : File.dirname(File.dirname(File.expand_path(__FILE__)))
APP_NAME = ENV.key?('APP_NAME') ? ENV['APP_NAME'] : File.basename(RAILS_ROOT)
BLUEPILL_HOME = RAILS_ROOT+'/tmp/bluepill'
MAX_PROCESS_RAM = ENV.key?('MAX_PROCESS_RAM') ? ENV['MAX_PROCESS_RAM'].to_i : 150
MAX_PROCESS_CPU = ENV.key?('MAX_PROCESS_CPU') ? ENV['MAX_PROCESS_CPU'].to_i : 20

SVDIR = if ENV.key?('SVDIR')
  ENV['SVDIR']
else
  if MACOSX
    ## when using brew
    SVDIR = '/usr/local/var/service'
    ENV['SVDIR'] = SVDIR
  else
    ## only tested on ubuntu
    SVDIR = SVDIR || ENV['HOME']+'/service'
    ENV['SVDIR'] = SVDIR
  end
end

FileUtils.mkdir_p "#{BLUEPILL_HOME}/socks"
FileUtils.mkdir_p "#{BLUEPILL_HOME}/pids"

Bluepill.application(APP_NAME.to_sym, :base_dir => BLUEPILL_HOME, :foreground => true) do |app|
  app.process("unicorn") do |process|
    
    process.pid_file = File.join(RAILS_ROOT, 'tmp', 'pids', 'unicorn.pid')
    process.working_dir = RAILS_ROOT

    process.start_command = <<-EOF
      '
      STATE=`cat #{SVDIR}/#{APP_NAME}/supervise/stat`
      if [ "$STATE" != "run" ]; then
        sleep 5
      fi
      STATE=`cat #{SVDIR}/#{APP_NAME}/supervise/stat`
      if [ "$STATE" != "run" ]; then
        sv stop #{APP_NAME}_bluepill
      else
        sleep 5
        sv start #{APP_NAME}
      fi
      '
    EOF
    process.stop_command = "sv stop #{APP_NAME}"
    process.restart_command = "sv hup #{APP_NAME}"
    
    if MACOSX
      process.uid = ENV['USER']
      process.gid = 'staff'
    else
      process.uid = process.gid = ENV['USER']
    end
    
    process.start_grace_time = 20.seconds
    process.stop_grace_time = 5.seconds
    process.restart_grace_time = 20.seconds

    process.monitor_children do |child_process|
      child_process.stop_command = "kill -QUIT {{PID}}"
      ## if 3 out of 4 checks results in a usage of more than 150 megs then kill this unicorn
      child_process.checks :mem_usage, :every => 10.seconds, :below => MAX_PROCESS_RAM.megabytes, :times => [3,4], :fires => :stop
      # if 3 out of 4 checks results in a cpu usage of more than 20 % then kill this unicorn
      child_process.checks :cpu_usage, :every => 10.seconds, :below => MAX_PROCESS_CPU, :times => [3,4], :fires => :stop
    end
  end
end
